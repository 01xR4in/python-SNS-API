#!/usr/bin/env python

""" cli to connect to Stormshield Network Security appliances"""

from __future__ import unicode_literals
import sys
import os
import re
import logging
import readline
import getpass
import atexit
import defusedxml.minidom
import begin
from pygments import highlight
from pygments.lexers import XmlLexer
from pygments.formatters import TerminalFormatter
from colorlog import ColoredFormatter

from stormshield.sns.sslclient import SSLClient, ServerError

FORMATTER = ColoredFormatter(
    "%(log_color)s%(levelname)-8s%(reset)s %(message)s",
    datefmt=None,
    reset=True,
    log_colors={
        'DEBUG': 'green',
        'INFO': 'cyan',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'red,bg_white'
    },
    secondary_log_colors={},
    style='%'
)

EMPTY_RE = re.compile(r'^\s*$')

def make_completer():
    """ load completer for readline """
    vocabulary = []
    with open(SSLClient.get_completer(), "r") as completelist:
        for line in completelist:
            vocabulary.append(line.replace('.', ' ').strip('\n'))

    def custom_complete(text, state):
        results = [x for x in vocabulary if x.startswith(text)] + [None]
        return results[state]
    return custom_complete

def main(host = None,
         ip = None,
         usercert = None,
         cabundle = None,
         password = None,
         port = 443,
         user = 'admin',
         sslverifypeer = True,
         sslverifyhost = True,
         credentials = None,
         script = None,
         outputformat = 'ini'):

    for handler in logging.getLogger().handlers:
        if handler.__class__ == logging.StreamHandler:
            handler.setFormatter(FORMATTER)

    if script is not None:
        try:
            script = open(script, 'r')
        except Exception as exception:
            logging.error("Can't open script file - %s", str(exception))
            sys.exit(1)

    if outputformat not in ['ini', 'xml']:
        logging.error("Unknown output format")
        sys.exit(1)

    if host is None:
        logging.error("No host provided")
        sys.exit(1)

    if password is None and usercert is None:
        password = getpass.getpass()

    try:
        client = SSLClient(
            host=host, ip=ip, port=port, user=user, password=password,
            sslverifypeer=sslverifypeer, sslverifyhost=sslverifyhost,
            credentials=credentials,
            usercert=usercert, cabundle=cabundle, autoconnect=False)
    except Exception as exception:
        logging.error(str(exception))
        sys.exit(1)

    try:
        client.connect()
    except Exception as exception:
        search = re.search(r'doesn\'t match \'(.*)\'', str(exception))
        if search:
            logging.error(("Appliance name can't be verified, to force connection "
                           "use \"--host %s --ip %s\" or \"--no-sslverifyhost\" "
                           "options"), search.group(1), host)
        else:
            logging.error(str(exception))
        sys.exit(1)

    # disconnect gracefuly at exit
    atexit.register(client.disconnect)

    if script is not None:
        for cmd in script.readlines():
            cmd = cmd.strip('\r\n')
            print(cmd)
            if cmd.startswith('#'):
                continue
            if EMPTY_RE.match(cmd):
                continue
            try:
                response = client.send_command(cmd)
            except Exception as exception:
                logging.error(str(exception))
                sys.exit(1)
            if outputformat == 'xml':
                print(highlight(defusedxml.minidom.parseString(response.xml).toprettyxml(),
                                XmlLexer(), TerminalFormatter()))
            else:
                print(response.output)
        sys.exit(0)

    # Start cli

    # load history
    histfile = os.path.join(os.path.expanduser("~"), ".sslclient_history")
    try:
        readline.read_history_file(histfile)
        readline.set_history_length(1000)
    except FileNotFoundError:
        pass

    def save_history(histfile):
        try:
            readline.write_history_file(histfile)
        except:
            logging.warning("Can't write history")

    atexit.register(save_history, histfile)

    # load auto-complete
    readline.parse_and_bind('tab: complete')
    readline.set_completer_delims('')
    readline.set_completer(make_completer())

    while True:
        try:
            cmd = input("> ")
        except EOFError:
            break

        # skip comments
        if cmd.startswith('#'):
            continue

        try:
            response = client.send_command(cmd)
        except ServerError as exception:
            # do not log error on QUIT
            if "quit".startswith(cmd.lower()) \
               and str(exception) == "Server disconnected":
                sys.exit(0)
            logging.error(str(exception))
            sys.exit(1)
        except Exception as exception:
            logging.error(str(exception))
            sys.exit(1)

        if response.ret == client.SRV_RET_DOWNLOAD:
            filename = input("File to save: ")
            try:
                client.download(filename)
                logging.info("File downloaded")
            except Exception as exception:
                logging.error(str(exception))
        elif response.ret == client.SRV_RET_UPLOAD:
            filename = input("File to upload: ")
            try:
                client.upload(filename)
                logging.info("File uploaded")
            except Exception as exception:
                logging.error(str(exception))
        else:
            if outputformat == 'xml':
                print(highlight(defusedxml.minidom.parseString(response.xml).toprettyxml(),
                                XmlLexer(), TerminalFormatter()))
            else:
                print(response.output)

# set function parameter annotations manually for compatibility with python2
main.__annotations__ = {
            'host': 'Remote UTM',
            'ip': 'Remote UTM ip',
            'usercert': 'User certificate file',
            'cabundle': 'CA bundle file',
            'password': 'Password',
            'port': 'Remote port',
            'user': 'User name',
            'sslverifypeer': 'Strict SSL CA check',
            'sslverifyhost': 'Strict SSL host name check',
            'credentials': 'Privilege list',
            'script': 'Command script',
            'outputformat': 'Output format (ini|xml)'
        }
# use correct input function with python2
try:
    input = raw_input
except NameError:
    pass

begin.start(begin.logging(main))
